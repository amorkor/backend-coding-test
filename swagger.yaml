openapi: 3.0.0
info:
  title: Backend coding test
  description: Riding app documentation.
  version: 1.0.0

paths: 
  # Utils
  /health:
    get:
      tags:
        - Health
      summary: Check server
      description: Check if server is running.
      responses: 
        '200':
          description: Healthy
  # Rides
  /rides:
    post:
      tags:
        - Ride
      summary:
        Create new ride
      description:
        Saves new drive to the database.
        Returns either newly created ride or validation error.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RideRequest'
      responses: 
        '200':
          description:
            Ride was successfully created
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/RideResponse' 
        '422':
          description:
            Recieved ride is invalid
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/RideValidationError' 
        '500':
          description:
            Unknown server error occurred
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/RideServerError' 
    get:
      tags:
        - Ride
      summary:
        Get all rides
      description:
        Returns requested page given the limit.
        In case of invalid limit returns page with all rides.
        In case of page parameter being less than 1 returns first page.
        If page parameter exceeds total amount of pages, returns last page.
      parameters:
        - in: path
          name: limit
          schema:
            type: integer
          description: amount of rides per page
        - in: path
          name: page
          schema:
            type: integer
          description: number of page to query
      responses:
        '200':
          description:
            Server recieved query
          content:
            application/json:
              schema:
                properties:
                  pagesTotal:
                    type: integer
                    example: 2
                    description:
                      amount of all pages resulted from given limit
                  currentPage:
                    type: integer
                    example: 1
                    description:
                      current page
                  pagedRows:
                    type: array
                    items:
                      - allOf:
                        - $ref: '#/components/schemas/RideResponse'
                    description:
                      rides listed on page
        '404':
          description:
            No rides found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/RidesNotFound' 
        '500':
          description:
            Unknown server error occurred
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/RideServerError' 

  rides/{id}:
    get:
      tags:
        - Ride
      summary:
        Get ride with id
      description:
        Ride with requested id
      responses:
        '200':
          description:
            Server recieved query.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RideResponse'
        '404':
          description:
            No rides found
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/RidesNotFound' 
        '500':
          description:
            Unknown server error occurred
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/RideServerError' 

components: 
  schemas:
    RideRequest:
      properties:
        start_latitude:
          type: integer
          example: 70
          description: range from -90 to 90
        start_longitude:
          type: integer
          example: 100
          description: range from -180 to 180
        end_latitude:
          type: integer
          example: -80
          description: range from -90 to 90
        end_longitude:
          type: integer
          example: -20
          description: range from -180 to 180
        rider_name:
          type: string
          example: Neo
        driver_name:
          type: string
          example: Morpheus
        driver_vehicle:
          type: string
          example: Nebuchadnezzar
      required:
        - rider_name
        - driver_name
        - driver_vehicle
        - end_longitude
        - start_latitude
        - start_longitude
        - end_latitude
    RideResponse:
      properties:
        rideID:
          type: integer
          readOnly: true
          example: 1
        startLatitude:
          type: integer
          example: 70
          description: range from -90 to 90
        startLongitude:
          type: integer
          example: 100
          description: range from -180 to 180
        endLatitude:
          type: integer
          example: -80
          description: range from -90 to 90
        endLongitude:
          type: integer
          example: -20
          description: range from -180 to 180
        riderName:
          type: string
          example: Neo
        driverName:
          type: string
          example: Morpheus
        driverVehicle:
          type: string
          example: Nebuchadnezzar
        created:
          readOnly: true
          type: string
          format: date
          example: '2022-02-08 10:50:06'
    RideValidationError:
      properties:
        errorCode:
          type: string
          example: 'VALIDATION_ERROR'
        message:
          type: string
          example: 'Rider name must be a non empty string'
    RideServerError:
      properties:
        errorCode:
          type: string
          example: 'SERVER_ERROR'
        message:
          type: string
          example: 'Unknown error'
    RidesNotFound:
      properties:
        errorCode:
          type: string
          example: 'RIDES_NOT_FOUND_ERROR'
        message:
          type: string
          example: 'Could not find any rides'
        

x-tagGroups:
  - name: API
    tags:
      - Ride
  - name: Utils
    tags:
      - Health
